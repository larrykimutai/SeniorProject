{"version":3,"sources":["util/interact.js","alchemylogo.svg","HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","alchemyKey","process","REACT_APP_ALCHEMY_KEY","web3","createAlchemyWeb3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","a","methods","message","call","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","params","txHash","HelloWorld","useState","walletAddress","setWallet","setStatus","setMessage","newMessage","setNewMessage","useEffect","events","UpdatedMessages","error","returnValues","connectWalletPressed","walletResponse","onUpdatePressed","id","src","alchemylogo","onClick","String","substring","style","paddingTop","type","placeholder","onChange","e","value","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45053c83.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contract-abi.json\")\r\nconst contractAddress = \"0x339e36A17321621B83ba746dB6a09e554Ee26915\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contract(\r\n    contractABI,\r\n    contractAddress\r\n  );\r\n\r\nexport const loadCurrentMessage = async () => { \r\n    const message = await helloWorldContract.methods.message().call();\r\n    return message;\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  \r\n    if (window.ethereum) {\r\n        try {\r\n          const addressArray = await window.ethereum.request({\r\n            method: \"eth_accounts\",\r\n          });\r\n          if (addressArray.length > 0) {\r\n            return {\r\n              address: addressArray[0],\r\n              status: \"👆🏽 Write a message in the text-field above.\",\r\n            };\r\n          } else {\r\n            return {\r\n              address: \"\",\r\n              status: \"🦊 Connect to Metamask using the top right button.\",\r\n            };\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            address: \"\",\r\n            status: \"😥 \" + err.message,\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: (\r\n            <span>\r\n              <p>\r\n                {\" \"}\r\n                🦊{\" \"}\r\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                  You must install Metamask, a virtual Ethereum wallet, in your\r\n                  browser.\r\n                </a>\r\n              </p>\r\n            </span>\r\n          ),\r\n        };\r\n      }\r\n};\r\n\r\nexport const updateMessage = async (address, message) => {\r\n    \r\n  //input error handling\r\n  if (!window.ethereum || address === null) {\r\n    return {\r\n      status:\r\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\r\n    };\r\n  }\r\n\r\n  if (message.trim() === \"\") {\r\n    return {\r\n      status: \"❌ Your message cannot be an empty string.\",\r\n    };\r\n  }\r\n  //set up transaction parameters\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: address, // must match user's active address.\r\n    data: helloWorldContract.methods.update(message).encodeABI(),\r\n  };\r\n\r\n  //sign the transaction\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n    });\r\n    return {\r\n      status: (\r\n        <span>\r\n          ✅{\" \"}\r\n          <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\r\n            View the status of your transaction on Etherscan!\r\n          </a>\r\n          <br />\r\n          ℹ️ Once the transaction is verified by the network, the message will\r\n          be updated automatically.\r\n        </span>\r\n      ),\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: \"😥 \" + error.message,\r\n    };\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/alchemylogo.9821dc1c.svg\";","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  helloWorldContract,\r\n  connectWallet,\r\n  updateMessage,\r\n  loadCurrentMessage,\r\n  getCurrentWalletConnected,\r\n} from \"./util/interact.js\";\r\n\r\nimport alchemylogo from \"./alchemylogo.svg\";\r\n\r\nconst HelloWorld = () => {\r\n  //state variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  //called only once\r\n  useEffect(async () => {\r\n    const message = await loadCurrentMessage();\r\n    setMessage(message);\r\n    addSmartContractListener();\r\n\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address);\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  function addSmartContractListener() {\r\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\r\n      if (error) {\r\n        setStatus(\"😥 \" + error.message);\r\n      } else {\r\n        setMessage(data.returnValues[1]);\r\n        setNewMessage(\"\");\r\n        setStatus(\"🎉 Your message has been updated!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  function addWalletListener() { //TODO: implement\r\n    \r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onUpdatePressed = async () => { \r\n    const { status } = await updateMessage(walletAddress, newMessage);\r\n    setStatus(status);\r\n  };\r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      <img id=\"logo\" src={alchemylogo}></img>\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\r\n      <p>{message}</p>\r\n\r\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Update the message in your smart contract.\"\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          value={newMessage}\r\n        />\r\n        <p id=\"status\">{status}</p>\r\n\r\n        <button id=\"publish\" onClick={onUpdatePressed}>\r\n          Update\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorld;\r\n","import HelloWorld from './HelloWorld'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <HelloWorld></HelloWorld>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}